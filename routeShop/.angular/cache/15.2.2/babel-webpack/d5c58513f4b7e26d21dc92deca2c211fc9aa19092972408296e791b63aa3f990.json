{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthService = void 0;\nvar user_service_1 = require(\"./user.service\");\nvar router_1 = require(\"@angular/router\");\nvar Observable_1 = require(\"rxjs/Observable\");\nvar auth_1 = require(\"angularfire2/auth\");\nrequire(\"rxjs/add/operator/switchMap\");\nrequire(\"rxjs/add/observable/of\");\nvar firebase = require(\"firebase\");\nvar i0 = require(\"@angular/core\");\nvar i1 = require(\"./user.service\");\nvar i2 = require(\"@angular/router\");\nvar AuthService = /** @class */function () {\n  function AuthService(userService, afAuth, route) {\n    this.userService = userService;\n    this.afAuth = afAuth;\n    this.route = route;\n    this.user$ = afAuth.authState;\n  }\n  AuthService.prototype.login = function () {\n    var returnUrl = this.route.snapshot.queryParamMap.get('returnUrl') || '/';\n    localStorage.setItem('returnUrl', returnUrl);\n    this.afAuth.auth.signInWithRedirect(new firebase.auth.GoogleAuthProvider());\n  };\n  AuthService.prototype.logout = function () {\n    this.afAuth.auth.signOut();\n  };\n  Object.defineProperty(AuthService.prototype, \"appUser$\", {\n    get: function () {\n      var _this = this;\n      return this.user$.switchMap(function (user) {\n        if (user) return _this.userService.get(user.uid);\n        return Observable_1.Observable.of(null);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n}();\nexports.AuthService = AuthService;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AACA;AACA;AAEAA;AACAA;AACA;;;;AAEA;EAIE,qBACUC,WAAwB,EACxBC,MAAuB,EACvBC,KAAqB;IAFrB,gBAAW,GAAXF,WAAW;IACX,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IACb,IAAI,CAACC,KAAK,GAAGF,MAAM,CAACG,SAAS;EAC/B;EAEAC,2BAAK,GAAL;IACE,IAAIC,SAAS,GAAG,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAACC,aAAa,CAACC,GAAG,CAAC,WAAW,CAAC,IAAI,GAAG;IACzEC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEL,SAAS,CAAC;IAE5C,IAAI,CAACL,MAAM,CAACW,IAAI,CAACC,kBAAkB,CAAC,IAAIC,QAAQ,CAACF,IAAI,CAACG,kBAAkB,EAAE,CAAC;EAC7E,CAAC;EAEDV,4BAAM,GAAN;IACE,IAAI,CAACJ,MAAM,CAACW,IAAI,CAACI,OAAO,EAAE;EAC5B,CAAC;EAEDC,sBAAIZ,iCAAQ;SAAZ;MAAA;MACE,OAAO,IAAI,CAACF,KAAK,CACde,SAAS,CAAC,cAAI;QACb,IAAIC,IAAI,EAAE,OAAOC,KAAI,CAACpB,WAAW,CAACS,GAAG,CAACU,IAAI,CAACE,GAAG,CAAC;QAE/C,OAAOC,uBAAU,CAACC,EAAE,CAAC,IAAI,CAAC;MAC5B,CAAC,CAAC;IACN,CAAC;;;;;;;;WA5BUlB,WAAW;IAAAmB,SAAXnB,WAAW;EAAA;oBAXxB;CAwCC,EA9BD;AACaoB","names":["require","userService","afAuth","route","user$","authState","AuthService","returnUrl","snapshot","queryParamMap","get","localStorage","setItem","auth","signInWithRedirect","firebase","GoogleAuthProvider","signOut","Object","switchMap","user","_this","uid","Observable_1","of","factory","exports"],"sourceRoot":"","sources":["C:\\Angular\\routeShop\\src\\app\\shared\\services\\auth.service.ts"],"sourcesContent":["import { UserService } from './user.service';\nimport { AppUser } from '../models/app-user';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { AngularFireAuth } from 'angularfire2/auth';\nimport { Injectable } from '@angular/core';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/observable/of'; \nimport * as firebase from 'firebase'; \n\n@Injectable()\nexport class AuthService {\n  user$: Observable<firebase.User>;\n\n  constructor(\n    private userService: UserService,\n    private afAuth: AngularFireAuth, \n    private route: ActivatedRoute) { \n    this.user$ = afAuth.authState;    \n  }\n\n  login() {\n    let returnUrl = this.route.snapshot.queryParamMap.get('returnUrl') || '/';\n    localStorage.setItem('returnUrl', returnUrl);\n    \n    this.afAuth.auth.signInWithRedirect(new firebase.auth.GoogleAuthProvider());\n  }\n\n  logout() { \n    this.afAuth.auth.signOut();\n  }\n\n  get appUser$() : Observable<AppUser> {\n    return this.user$\n      .switchMap(user => {\n        if (user) return this.userService.get(user.uid);\n\n        return Observable.of(null);\n      });    \n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}